const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();

require("dotenv").config();
console.log("üîç MONGO_URI:", process.env.MONGO_URI); // –û—Ç–ª–∞–¥–∫–∞

const app = express();
app.use(express.json());
app.use(cors());

// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä
app.get("/", (req, res) => {
    res.send("‚úÖ API is running...");
});

// ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        console.log("‚úÖ MongoDB connected");

        // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
        const PORT = process.env.PORT || 3000;
        app.listen(PORT, "0.0.0.0", () => console.log(`‚úÖ Server running on http://localhost:${PORT}`));
    })
    .catch(err => {
        console.error("‚ùå MongoDB connection error:", err);
        process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    });

// ‚úÖ –°—Ö–µ–º–∞ –∏ –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á
const TaskSchema = new mongoose.Schema({
    text: String,
    date: String,
    completed: Boolean
});
const Task = mongoose.model("Task", TaskSchema);

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω `date`, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É)
app.get("/tasks", async (req, res) => {
    try {
        const { date } = req.query;
        const tasks = await Task.find(date ? { date } : {});
        res.json(tasks);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á", error });
    }
});

// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
app.post("/tasks", async (req, res) => {
    try {
        const task = new Task(req.body);
        await task.save();
        res.status(201).json(task);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", error });
    }
});

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ `completed`)
app.put("/tasks/:id/toggle", async (req, res) => {
    try {
        const task = await Task.findById(req.params.id);
        if (!task) return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

        task.completed = !task.completed;
        await task.save();
        res.json(task);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", error });
    }
});

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.delete("/tasks/:id", async (req, res) => {
    try {
        const deletedTask = await Task.findByIdAndDelete(req.params.id);
        if (!deletedTask) return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

        res.json({ message: "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞", deletedTask });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", error });
    }
});
